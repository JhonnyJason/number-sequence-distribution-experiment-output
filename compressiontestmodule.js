// Generated by CoffeeScript 2.5.1
(function() {
  var CHUNK_SIZE, allChunks, bufferFakeFile, butl, compressiontestmodule, crypto, disectFileToChunks, log, mappingFunction, olog, ostr, print;

  compressiontestmodule = {
    name: "compressiontestmodule"
  };

  //###########################################################
  //region printLogFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["compressiontestmodule"] != null) {
      console.log("[compressiontestmodule]: " + arg);
    }
  };

  ostr = function(obj) {
    return JSON.stringify(obj, null, 4);
  };

  olog = function(obj) {
    return log("\n" + ostr(obj));
  };

  print = function(arg) {
    return console.log(arg);
  };

  //endregion

  //###########################################################
  //region modulesFromEnvironment
  crypto = require("crypto");

  butl = require("thingy-byte-utils");

  mappingFunction = null;

  //endregion

  //###########################################################
  //region internalProperties
  CHUNK_SIZE = 2; // || 4

  bufferFakeFile = null;

  allChunks = [];

  //endregion

  //###########################################################
  compressiontestmodule.initialize = async function() {
    log("compressiontestmodule.initialize");
    mappingFunction = allModules.pseudorandomsha1module;
    bufferFakeFile = (await crypto.randomBytes(444));
    // olog {bufferFakeFile}
    disectFileToChunks();
  };

  //###########################################################
  // olog {allChunks}
  // log butl.bytesToUtf8(randomBytes)
  disectFileToChunks = function() {
    if (CHUNK_SIZE === 2) {
      allChunks = new Uint16Array(bufferFakeFile.buffer, bufferFakeFile.byteOffset, bufferFakeFile.length / 2);
    }
    if (CHUNK_SIZE === 4) {
      allChunks = new Uint32Array(bufferFakeFile.buffer, bufferFakeFile.byteOffset, bufferFakeFile.length / 4);
    }
  };

  compressiontestmodule.runTest = function() {
    var matchFactor;
    log("compressiontestmodule.runTest");
    mappingFunction.createSequenceMapping(0, CHUNK_SIZE, 1);
    matchFactor = mappingFunction.getMatchingFactor(allChunks);
    log(matchFactor);
  };

  module.exports = compressiontestmodule;

}).call(this);
